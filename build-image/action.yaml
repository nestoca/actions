name: build-image
description: |-
  Builds docker image and pushes it to one of nesto's GCP registries:
  - Google Container Registry: gcr.io/nesto-ci-78a3f2e6
  - Google Artifacts Registry: northamerica-northeast1-docker.pkg.dev/nesto-ci-78a3f2e6

inputs:

  name:
    description: Name of image to build and push.
    required: true

  tags:
    description: Tags to put on image.
    required: true

  key:
    description: >-
        Key for service account to use for pushing images (typically `secrets.GCP_DOCKER_SA_KEY`).
        Generated by `global` pulumi project, which exposes it and other actions secrets in the `githubActionsSecrets` output
    required: true

  context:
    description: (Optional) Context directory to build image from (defaults to `.`).
    required: false
    default: .

  docker-file:
    description: (Optional) File path to `Dockerfile` (defaults to `<context>/Dockerfile`).
    required: false
    default: ""

  repository:
    description: >-
      (Optional) The Google Artifact Registry repo to push the image to. If unset, image will be pushed to Google Container Registry. 

    required: false
    default: ""

  push:
    description: (Optional) Should the image be published?
    required: false
    default: "false"

  secrets:
    description: >-
      (Optional) Secrets to pass to build. These will be available as environment variables
      during the build. Format is a multi-line string, each line in the form `"key=value"`.
      Quoting is only required if the value contains whitespace.
      See: https://docs.docker.com/build/ci/github-actions/secrets/
    required: false
    default: ""

  secret-files:
    description: >-
      (Optional) Secret files to pass to build. These will be available as mountable files
      during the build. Format is a multi-line string, each line in the form `"key=filename"`.
      Quoting is only required if the value contains whitespace.
      See: https://docs.docker.com/build/ci/github-actions/secrets/
    required: false
    default: ""
      
runs:
  using: composite
  steps:

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - if: inputs.repository != ''
      name: Login to GAR
      uses: docker/login-action@v2
      with:
        registry: northamerica-northeast1-docker.pkg.dev
        username: _json_key
        password: ${{ inputs.key }}

    - if: inputs.repository == ''
      name: Login to GCR 
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ inputs.key }}
    
    - name: Generate image name
      id: generate-name
      shell: bash
      run: |
        if [[ "${{ inputs.repository }}" == "" ]]; then
          echo "image-name=gcr.io/nesto-ci-78a3f2e6/${{ inputs.name }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.repository }}" != "" ]]; then
          echo "image-name=northamerica-northeast1-docker.pkg.dev/nesto-ci-78a3f2e6/${{ inputs.repository }}/${{ inputs.name }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate image tags
      id: generate-tags
      shell: bash
      run: |
        IFS=',' read -ra TAGS <<< "${{ inputs.tags }}"
        echo "tags<<EOF" >> $GITHUB_OUTPUT
        for tag in "${TAGS[@]}"; do
          echo "type=raw,value=${tag}" >> $GITHUB_OUTPUT
        done
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        # list of Docker images to use as base name for tags
        images: |-
          ${{ steps.generate-name.outputs.image-name }}
        # generate Docker tags based on the following events/attributes
        tags: |- 
          ${{ steps.generate-tags.outputs.tags }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.docker-file }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        secrets: ${{ inputs.secrets }}
        secret-files: ${{ inputs.secret-files }}
